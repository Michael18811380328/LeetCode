// 120. 三角形最小路径和

// 给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。
// [
//      [2],
//     [3,4],
//    [6,5,7],
//   [4,1,8,3]
// ]
// 自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。

// 思路一：全部的路径是 2 ^ k 那么可以把全部的路径计算出来。获取三角形的层数k，然后循环获取求和，但是这样做性能很差

// 思路二：贪婪算法。获取当前情况下最小的结果，这样正确率在90以上，如果有极端值，可能受到影响

// 思路三：首先把三角形构造一个树，然后计算不同的路径的总和，这样计算性能比方法一好，正确率比第二种好（优先使用第三种思路）

// const Arr = [
//   [2],
//   [3, 4],
//   [6, 5, 7],
//   [4, 1, 8, 3],
// ];

// function ArrayToTree(array) {
//   const len = array.length;
//   for (let i = 0; i < len; i++) {

//   }
// }
